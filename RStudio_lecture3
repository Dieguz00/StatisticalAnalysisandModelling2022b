Today we're going to deal with data structure ^_^

### Simple logical expressions
## relational operators
# we can make R evaluate some expressions, receiving outcomes "TRUE" or "FALSE":
1 < 2
2 > 3
# in the case of "bigger/smaller than or equal", the "=" goes always after the ">" or "<":
2 <= 3
2 >= 2
# in the case of "equal to", we need two "=":
4 == 4
# this due to the fact that just one "=" operates the same function as "<-":
a = 4
a <- 4
# if we want to test if two objects are different:
2 != 5
# example with outcome "TRUE"
a <- 3
b <- 2
a < b
# if we want to make R consider the alphabetical order, we can use brackets:
"a" < "b"
# let's test the identity of a variable:
a <- "tree"
a == "tree"
a != "tree"

## logical operators
# let's evaluate the intersection of two logical expression, so if both of them are TRUE; this is called the "And" operator:
a <- 1
b <- 3
a < 3 && b < 4
a > 3 && b < 4
# the "or" operator, instead:
a > 3 || b < 4
# to negate a logical value, that is, to obtain the opposite logical value:
!FALSE
!(a > 3 || b < 4)

## priorities
# multiplications have the priority over sums and subtractions:
1 + 2 * 3
# exponentiations have the priority even over multiplications and divisions:
1 + 2 * 3 ** 2
# everything that is between parenthesis has the priority over everything else:
(1 + 2) * 3
# relational operators have lower priorities than numerical operators:
(1 + 2) * 3 < a
# logical operators have lower priorities than relational operators:
(1 + 2) * 3 < a || b > 2 ** 3 / 2
# let's try to put a "negation" operator for the expression:
(1 + 2) * 3 < a || !(b > 2 ** 3 / 2)

### Data structure
## vectors
# vectors are monodimensional (unidimensional)
# vectors can be character, logical, integer, numerical
# to build a vector we can create a sequence of integer numbers:
1:10
10:1
# let's assign a sequence of integer numbers to a variable:
my_range <- 1:10
my_range
# let's see the type of variable we've just created:
typeof(my_range)
# another way of writing a sequence is through the function "seq":
seq(from = 1, to = 10)
# if we want to pick numbers, within this sequence, by steps:
seq(from = 1, to = 10, by 2)
# in some cases, the last number won't coincide with the maximum range of the sequence:
seq(from = 1, to = 10, by = 2.2)
# if we want a sequence of x elements within the minimum and maximum ranges of a sequence, already evenly spaced:
seq(from = 1, to = 10, length.out = 15)
# if we want to repeat a number or sequence x times, we use the function "rep":
rep(1, times = 5)
rep(1:5, times = 5)
# if we want to repeat each element x times but starting the next one only after finishing the previous one:
rep(1:5, each = 5)
# to concatenate various elements together, we use the function "c":
c(TRUE, FALSE, TRUE)
# then, to create a vector, we use the function "vec":
vec <- c(TRUE, FALSE, TRUE)
vec
# we can use vectors to store our data:
is_native <- c(T, F, T)
n_ind <- c(10L, 7L, 5L)
taxa_age <- c(2.11, 10.5, 68.9)
taxa <- c("plant", "bird", "mammal")
# if we want to know the number of elements inside a vector, we use the function "length":
length(taxa)
# we can use the functions "typeof" or "class" to identify the nature of a vector; the difference is that "typeof" is deeper than "class":
typeof(n_ind)
class(n_ind)
# another difference between these two functions is that "class" says "numerical" instead of "double", but these two terms mean the same:
typeof(taxa_age)
class(taxa_age)
# now let's create a sequence of numbers:
my_integer <- 6:10
my_integer
# if i want to extract one element from this sequence, square brackets are fabolous:
my_integer[2]
# to extract a series of elements that are located one after the other:
my_integer[2:4]
# to extract some specific elements, we use the function "c":
my_integer[c(1, 2, 4)]
# another way of extracting just some elements within a vector is to create logical vector and then apply it on the integer vector:
my_logical <- c(T, F, T, F, T)
my_integer[my_logical]
# if the logical vector is shorter than the integer vector, a process called "recycling" occurs:
my_logical <- c(F, T)
my_integer[my_logical]
# this process leads to a repeated extraction, that follows the "rythm" put in the logical vector; this happens until the shorter vector "fills" the longest one

## matrix
# they have 2 dimensions

## list
# the most flexible structure
# they can contain anything

## dataframe
# 
